import React, { useState, useRef, useEffect } from 'react';
import { businessCategories } from '../data/businesses';
import toast from 'react-hot-toast';
import { ChevronDown, X, Plus, Minus, Users, User, AlertCircle } from 'lucide-react';

export default function BusinessSubmissionForm({ isOpen = true, onClose = () => {} }) {
  const [submissionType, setSubmissionType] = useState('single'); // 'single' or 'group'
  
  // Error states for form validation
  const [errors, setErrors] = useState({});
  const [ownerErrors, setOwnerErrors] = useState({});
  const [businessErrors, setBusinessErrors] = useState({});
  
  // Owner profile data for business groups
  const [ownerProfile, setOwnerProfile] = useState({
    name: '',
    email: '',
    phone: '',
    bio: '',
    photo: null
  });
  const [ownerPhotoPreview, setOwnerPhotoPreview] = useState(null);
  
  // Single business form data
  const [formData, setFormData] = useState({
    name: '',
    website: '',
    email: '',
    phone: '',
    category: '',
    description: '',
    address: '',
    socialMedia: {
      instagram: '',
      facebook: '',
      linkedin: ''
    }
  });

  // Multiple businesses for groups
  const [businesses, setBusinesses] = useState([{
    id: 1,
    name: '',
    website: '',
    phone: '',
    email: '',
    category: '',
    description: '',
    address: '',
    socialMedia: {
      instagram: '',
      facebook: '',
      linkedin: ''
    },
    logo: null,
    logoPreview: null
  }]);

  const [logoFile, setLogoFile] = useState(null);
  const [logoPreview, setLogoPreview] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);
  const [activeBusinessDropdown, setActiveBusinessDropdown] = useState(null);
  
  const fileInputRef = useRef(null);
  const ownerPhotoInputRef = useRef(null);
  const dropdownRef = useRef(null);
  const dropdownContainerRef = useRef(null);

  // Validation helper functions - simplified
  const validateEmail = (email) => {
    if (!email) return true; // Allow empty emails
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validatePhone = (phone) => {
    if (!phone) return true; // Allow empty phones
    return phone.trim().length >= 5; // Very basic check - just need some digits
  };

  const validateWebsite = (website) => {
    if (!website) return true; // Optional field
    return website.includes('.'); // Very basic check - just need a dot
  };

  // Clear specific field error when user starts typing
  const clearFieldError = (fieldName, errorType = 'main') => {
    if (errorType === 'main') {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[fieldName];
        return newErrors;
      });
    } else if (errorType === 'owner') {
      setOwnerErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[fieldName];
        return newErrors;
      });
    } else if (errorType === 'business') {
      setBusinessErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[fieldName];
        return newErrors;
      });
    }
  };

  // Validate single business form - very minimal validation
  const validateSingleBusiness = () => {
    const newErrors = {};

    // Only require business name
    if (!formData.name.trim()) {
      newErrors.name = 'Business name is required';
    }

    // Optional validation for other fields if they are provided
    if (formData.email && !validateEmail(formData.email)) {
      newErrors.email = 'Please enter a valid email address';
    }

    if (formData.phone && !validatePhone(formData.phone)) {
      newErrors.phone = 'Please enter a valid phone number';
    }

    if (formData.website && !validateWebsite(formData.website)) {
      newErrors.website = 'Please enter a valid website URL';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Validate owner profile for business groups - minimal validation
  const validateOwnerProfile = () => {
    const newErrors = {};

    // Only require owner name
    if (!ownerProfile.name.trim()) {
      newErrors.name = 'Owner name is required';
    }

    // Optional validation for other fields if they are provided
    if (ownerProfile.email && !validateEmail(ownerProfile.email)) {
      newErrors.email = 'Please enter a valid email address';
    }

    if (ownerProfile.phone && !validatePhone(ownerProfile.phone)) {
      newErrors.phone = 'Please enter a valid phone number';
    }

    setOwnerErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Validate business group - minimal validation
  const validateBusinessGroup = () => {
    const newErrors = {};

    businesses.forEach((business, index) => {
      const businessKey = `business-${business.id}`;
      
      // Only require business name
      if (!business.name.trim()) {
        newErrors[`${businessKey}-name`] = 'Business name is required';
      }

      // Optional validation for other fields if they are provided
      if (business.website && !validateWebsite(business.website)) {
        newErrors[`${businessKey}-website`] = 'Please enter a valid website URL';
      }

      if (business.phone && !validatePhone(business.phone)) {
        newErrors[`${businessKey}-phone`] = 'Please enter a valid phone number';
      }

      if (business.email && !validateEmail(business.email)) {
        newErrors[`${businessKey}-email`] = 'Please enter a valid email address';
      }
    });

    setBusinessErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setShowCategoryDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Keyboard navigation for category dropdown
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (!showCategoryDropdown) return;
      
      const key = event.key.toUpperCase();
      if (/^[A-Z]$/.test(key)) {
        event.preventDefault();
        
        // Find the first category starting with this letter
        const targetIndex = businessCategories.findIndex(category => 
          category.toUpperCase().startsWith(key)
        );
        
        if (targetIndex !== -1 && dropdownContainerRef.current) {
          // Calculate scroll position
          const itemHeight = 40; // Approximate height of each option
          const scrollTop = targetIndex * itemHeight;
          
          // Smooth scroll to the target category
          dropdownContainerRef.current.scrollTo({
            top: Math.max(0, scrollTop - 100), // Offset by 100px to show some context above
            behavior: 'smooth'
          });
        }
      }
    };

    if (showCategoryDropdown) {
      document.addEventListener('keydown', handleKeyDown);
    }

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [showCategoryDropdown]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    // Clear error when user starts typing
    clearFieldError(name, 'main');
    
    if (name.includes('socialMedia.')) {
      const socialPlatform = name.split('.')[1];
      setFormData(prev => ({
        ...prev,
        socialMedia: {
          ...prev.socialMedia,
          [socialPlatform]: value
        }
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleCategorySelect = (category) => {
    setFormData(prev => ({
      ...prev,
      category: category
    }));
    setShowCategoryDropdown(false);
    clearFieldError('category', 'main');
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.type.startsWith('image/')) {
        if (file.size > 5 * 1024 * 1024) { // 5MB limit
          toast.error('Please select an image smaller than 5MB');
          e.target.value = '';
          return;
        }
        setLogoFile(file);
        const reader = new FileReader();
        reader.onload = (e) => setLogoPreview(e.target.result);
        reader.readAsDataURL(file);
      } else {
        toast.error('Please select an image file (JPG, PNG, etc.)');
        e.target.value = '';
      }
    }
  };

  // Owner profile handlers
  const handleOwnerInputChange = (e) => {
    const { name, value } = e.target;
    clearFieldError(name, 'owner');
    setOwnerProfile(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleOwnerPhotoChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.type.startsWith('image/')) {
        if (file.size > 5 * 1024 * 1024) { // 5MB limit
          toast.error('Please select an image smaller than 5MB');
          e.target.value = '';
          return;
        }
        setOwnerProfile(prev => ({ ...prev, photo: file }));
        const reader = new FileReader();
        reader.onload = (e) => setOwnerPhotoPreview(e.target.result);
        reader.readAsDataURL(file);
      } else {
        toast.error('Please select an image file (JPG, PNG, etc.)');
        e.target.value = '';
      }
    }
  };

  // Business group handlers
  const handleBusinessInputChange = (businessId, field, value) => {
    clearFieldError(`business-${businessId}-${field}`, 'business');
    setBusinesses(prev => prev.map(business => 
      business.id === businessId 
        ? { ...business, [field]: value }
        : business
    ));
  };

  const handleBusinessSocialMediaChange = (businessId, platform, value) => {
    setBusinesses(prev => prev.map(business => 
      business.id === businessId 
        ? { 
            ...business, 
            socialMedia: { 
              ...business.socialMedia, 
              [platform]: value 
            }
          }
        : business
    ));
  };

  const handleBusinessCategorySelect = (businessId, category) => {
    handleBusinessInputChange(businessId, 'category', category);
    setActiveBusinessDropdown(null);
    clearFieldError(`business-${businessId}-category`, 'business');
  };

  const handleBusinessLogoChange = (businessId, e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.type.startsWith('image/')) {
        if (file.size > 5 * 1024 * 1024) { // 5MB limit
          toast.error('Please select an image smaller than 5MB');
          e.target.value = '';
          return;
        }
        const reader = new FileReader();
        reader.onload = (e) => {
          setBusinesses(prev => prev.map(business => 
            business.id === businessId 
              ? { ...business, logo: file, logoPreview: e.target.result }
              : business
          ));
        };
        reader.readAsDataURL(file);
      } else {
        toast.error('Please select an image file (JPG, PNG, etc.)');
        e.target.value = '';
      }
    }
  };

  const addBusiness = () => {
    const newId = Math.max(...businesses.map(b => b.id)) + 1;
    setBusinesses(prev => [...prev, {
      id: newId,
      name: '',
      website: '',
      phone: '',
      email: '',
      category: '',
      description: '',
      address: '',
      socialMedia: {
        instagram: '',
        facebook: '',
        linkedin: ''
      },
      logo: null,
      logoPreview: null
    }]);
  };

  const removeBusiness = (businessId) => {
    if (businesses.length > 1) {
      setBusinesses(prev => prev.filter(business => business.id !== businessId));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      if (submissionType === 'single') {
        // Validate single business form
        if (!validateSingleBusiness()) {
          toast.error('Please fix the errors below and try again');
          setIsSubmitting(false);
          return;
        }

        const existingBusinesses = JSON.parse(localStorage.getItem('submittedBusinesses') || '[]');

        // Create new business object
        const newBusiness = {
          id: `business-${Date.now()}`,
          ...formData,
          logo: logoPreview || null,
          heroImage: null,
          services: [],
          addedDate: new Date().toISOString().split('T')[0],
          isGroupMember: false
        };

        // Save to localStorage
        const updatedBusinesses = [...existingBusinesses, newBusiness];
        localStorage.setItem('submittedBusinesses', JSON.stringify(updatedBusinesses));

        toast.success('✅ Business submitted successfully! Your submission will be reviewed by our admin team and will appear in the directory once approved.');

      } else {
        // Validate business group
        const ownerValid = validateOwnerProfile();
        const businessesValid = validateBusinessGroup();

        if (!ownerValid || !businessesValid) {
          toast.error('Please fix the errors below and try again');
          setIsSubmitting(false);
          return;
        }

        const existingBusinesses = JSON.parse(localStorage.getItem('submittedBusinesses') || '[]');
        const existingGroups = JSON.parse(localStorage.getItem('businessGroups') || '[]');

        // Create business group
        const groupId = `group-${Date.now()}`;
        const newGroup = {
          id: groupId,
          owner: {
            ...ownerProfile,
            photo: ownerPhotoPreview || null
          },
          businesses: businesses.map(business => business.name),
          createdDate: new Date().toISOString().split('T')[0]
        };

        // Create individual business objects linked to the group
        const newBusinesses = businesses.map((business, index) => ({
          id: `business-${Date.now()}-${index}-${Math.random().toString(36).substr(2, 9)}`,
          name: business.name,
          website: business.website || '',
          email: business.email || ownerProfile.email || '', // Use business email or fallback to owner's
          phone: business.phone || ownerProfile.phone || '', // Use business phone or fallback to owner's
          category: business.category,
          description: business.description || '',
          address: business.address,
          socialMedia: business.socialMedia,
          logo: business.logoPreview || null,
          heroImage: null,
          services: [],
          addedDate: new Date().toISOString().split('T')[0],
          isGroupMember: true,
          groupId: groupId
        }));

        // Save to localStorage
        const updatedBusinesses = [...existingBusinesses, ...newBusinesses];
        const updatedGroups = [...existingGroups, newGroup];
        
        localStorage.setItem('submittedBusinesses', JSON.stringify(updatedBusinesses));
        localStorage.setItem('businessGroups', JSON.stringify(updatedGroups));

        toast.success(`✅ Business group with ${businesses.length} businesses submitted successfully! Your submissions will be reviewed by our admin team and will appear in the directory once approved.`);
      }

      // Reset forms and errors
      resetForms();
      setErrors({});
      setOwnerErrors({});
      setBusinessErrors({});
      
      // Close modal (the parent will handle refreshing the business list)
      onClose();

    } catch (error) {
      console.error('Error submitting business:', error);
      toast.error('Failed to submit business. Please check your information and try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const resetForms = () => {
      setFormData({
        name: '',
        website: '',
        email: '',
        phone: '',
        category: '',
        description: '',
        address: '',
        socialMedia: {
          instagram: '',
          facebook: '',
          linkedin: ''
        }
      });
    setOwnerProfile({
      name: '',
      email: '',
      phone: '',
      bio: '',
      photo: null
    });
    setBusinesses([{
      id: 1,
      name: '',
      website: '',
      phone: '',
      email: '',
      category: '',
      description: '',
      address: '',
      socialMedia: {
        instagram: '',
        facebook: '',
        linkedin: ''
      },
      logo: null,
      logoPreview: null
    }]);
      setLogoFile(null);
      setLogoPreview(null);
    setOwnerPhotoPreview(null);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    if (ownerPhotoInputRef.current) {
      ownerPhotoInputRef.current.value = '';
    }
  };

  // Don't render if not open
  if (!isOpen) return null;

  // Error message component
  const ErrorMessage = ({ error }) => {
    if (!error) return null;
    return (
      <div className="flex items-center gap-1 mt-1 text-sm text-red-600">
        <AlertCircle className="w-4 h-4 flex-shrink-0" />
        <span>{error}</span>
      </div>
    );
  };

  return (
    <div 
      className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4"
      onClick={(e) => e.target === e.currentTarget && onClose()}
    >
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex justify-between items-center">
          <h2 className="text-2xl font-bold text-gray-900">List Your Business</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 focus:outline-none"
          >
            <X className="w-6 h-6" />
          </button>
        </div>
        
        <div className="p-6">
          {/* Important Notice */}
          <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex items-start gap-3">
              <div className="flex-shrink-0">
                <div className="flex items-center justify-center w-8 h-8 bg-blue-100 rounded-full">
                  <span className="text-blue-600 text-lg">ℹ️</span>
                </div>
              </div>
              <div>
                <h3 className="text-sm font-medium text-blue-900 mb-1">Admin Review Process</h3>
                <p className="text-sm text-blue-700">
                  All business submissions will be reviewed by our admin team before being published in the directory. 
                  You will be notified once your submission is approved and live on the website.
                </p>
              </div>
            </div>
          </div>

          {/* Show general error message if there are errors */}
          {(Object.keys(errors).length > 0 || Object.keys(ownerErrors).length > 0 || Object.keys(businessErrors).length > 0) && (
            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
              <div className="flex items-start gap-3">
                <div className="flex-shrink-0">
                  <AlertCircle className="w-5 h-5 text-red-600 mt-0.5" />
                </div>
                <div>
                  <h3 className="text-sm font-medium text-red-900 mb-1">Please fix the following errors:</h3>
                  <p className="text-sm text-red-700">
                    Check the highlighted fields below and correct any issues before submitting.
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Submission Type Toggle */}
          <div className="mb-6">
            <div className="flex items-center gap-4 p-4 bg-gray-50 rounded-lg">
              <h3 className="text-lg font-medium text-gray-900">What would you like to add?</h3>
              <div className="flex gap-2">
                <button
                  type="button"
                  onClick={() => setSubmissionType('single')}
                  className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                    submissionType === 'single'
                      ? 'bg-primary-600 text-white'
                      : 'bg-white text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <User className="w-4 h-4" />
                  Single Business
                </button>
                <button
                  type="button"
                  onClick={() => setSubmissionType('group')}
                  className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                    submissionType === 'group'
                      ? 'bg-primary-600 text-white'
                      : 'bg-white text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <Users className="w-4 h-4" />
                  Business Group
                </button>
              </div>
            </div>
            <p className="text-sm text-gray-600 mt-2">
              {submissionType === 'single' 
                ? 'Add a single business to the directory'
                : 'Add multiple related businesses under one owner profile'
              }
            </p>
          </div>
      
      <form onSubmit={handleSubmit} className="space-y-6">
            {submissionType === 'single' ? (
              /* Single Business Form */
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Business Name */}
          <div className="md:col-span-2">
            <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
              Business Name *
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              className={`input-style ${errors.name ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
              required
            />
            <ErrorMessage error={errors.name} />
          </div>

          {/* Category */}
              <div className="relative" ref={dropdownRef}>
            <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-2">
              Business Category (Optional)
            </label>
                <button
                  type="button"
                  onClick={() => setShowCategoryDropdown(!showCategoryDropdown)}
                  className={`w-full px-4 py-2 text-left border rounded-lg bg-gray-50 hover:bg-gray-100 focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-shadow duration-200 flex justify-between items-center ${
                    errors.category ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : 'border-gray-300'
                  }`}
                >
                  <span className={formData.category ? 'text-gray-900' : 'text-gray-500'}>
                    {formData.category || 'Select a category'}
                  </span>
                  <ChevronDown className="w-4 h-4 text-gray-400" />
                </button>

                {showCategoryDropdown && (
                  <div 
                    ref={dropdownContainerRef}
                    className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-20 overflow-y-auto" 
                    style={{ maxHeight: '600px' }}
                  >
                    <div className="p-2 text-xs text-gray-500 bg-gray-50 border-b border-gray-200">
                      💡 Tip: Press any letter (A-Z) to jump to categories starting with that letter
                    </div>
              {businessCategories.map(category => (
                      <button
                        key={category}
                        type="button"
                        onClick={() => handleCategorySelect(category)}
                        className="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 border-b border-gray-100 last:border-b-0"
                      >
                        {category}
                      </button>
                    ))}
                  </div>
                )}
            <ErrorMessage error={errors.category} />
          </div>

          {/* Website */}
          <div>
            <label htmlFor="website" className="block text-sm font-medium text-gray-700 mb-2">
              Website URL (Optional)
            </label>
            <input
              type="url"
              id="website"
              name="website"
              value={formData.website}
              onChange={handleInputChange}
              className={`input-style ${errors.website ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
              placeholder="https://example.com"
            />
            <ErrorMessage error={errors.website} />
          </div>

          {/* Address */}
          <div className="md:col-span-2">
            <label htmlFor="address" className="block text-sm font-medium text-gray-700 mb-2">
              Full Address (Optional)
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={formData.address}
              onChange={handleInputChange}
              className={`input-style ${errors.address ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
            />
            <ErrorMessage error={errors.address} />
          </div>

          {/* Phone */}
          <div>
            <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-2">
              Phone Number (Optional)
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleInputChange}
              className={`input-style ${errors.phone ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
            />
            <ErrorMessage error={errors.phone} />
          </div>

          {/* Email */}
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
              Email Address (Optional)
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              className={`input-style ${errors.email ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
            />
            <ErrorMessage error={errors.email} />
          </div>

          {/* Description */}
          <div className="md:col-span-2">
            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
              Business Description (Optional)
            </label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              rows={3}
              className="input-style"
              placeholder="Brief description of your business and services..."
            />
          </div>

          {/* Logo Upload */}
          <div className="md:col-span-2">
            <label htmlFor="logo" className="block text-sm font-medium text-gray-700 mb-2">
              Business Logo/Image (Optional)
            </label>
            <input
              type="file"
              id="logo"
              name="logo"
              ref={fileInputRef}
              onChange={handleFileChange}
              accept="image/*"
              className="input-style"
            />
            {logoPreview && (
              <div className="mt-2">
                <img
                  src={logoPreview}
                  alt="Logo preview"
                  className="w-20 h-20 object-cover rounded border"
                />
              </div>
            )}
          </div>

          {/* Social Media Links */}
          <div className="md:col-span-2">
            <h3 className="text-lg font-medium text-gray-900 mb-3">Social Media Links (Optional)</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label htmlFor="facebook" className="block text-sm font-medium text-gray-700 mb-2">
                  Facebook URL
                </label>
                <input
                  type="url"
                  id="facebook"
                  name="socialMedia.facebook"
                  value={formData.socialMedia.facebook}
                  onChange={handleInputChange}
                  className="input-style"
                  placeholder="https://facebook.com/..."
                />
              </div>
              <div>
                <label htmlFor="instagram" className="block text-sm font-medium text-gray-700 mb-2">
                  Instagram URL
                </label>
                <input
                  type="url"
                  id="instagram"
                  name="socialMedia.instagram"
                  value={formData.socialMedia.instagram}
                  onChange={handleInputChange}
                  className="input-style"
                  placeholder="https://instagram.com/..."
                />
              </div>
              <div>
                <label htmlFor="linkedin" className="block text-sm font-medium text-gray-700 mb-2">
                  LinkedIn URL
                </label>
                <input
                  type="url"
                  id="linkedin"
                  name="socialMedia.linkedin"
                  value={formData.socialMedia.linkedin}
                  onChange={handleInputChange}
                  className="input-style"
                  placeholder="https://linkedin.com/..."
                />
              </div>
            </div>
          </div>
        </div>
            ) : (
              /* Business Group Form */
              <div className="space-y-8">
                {/* Owner Profile Section */}
                <div className="bg-blue-50 p-6 rounded-lg">
                  <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center gap-2">
                    <User className="w-5 h-5" />
                    Owner Profile
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="ownerName" className="block text-sm font-medium text-gray-700 mb-2">
                        Full Name *
                      </label>
                      <input
                        type="text"
                        id="ownerName"
                        name="name"
                        value={ownerProfile.name}
                        onChange={handleOwnerInputChange}
                        className={`input-style ${ownerErrors.name ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                        required
                      />
                      <ErrorMessage error={ownerErrors.name} />
                    </div>
                    <div>
                      <label htmlFor="ownerEmail" className="block text-sm font-medium text-gray-700 mb-2">
                        Email Address (Optional)
                      </label>
                      <input
                        type="email"
                        id="ownerEmail"
                        name="email"
                        value={ownerProfile.email}
                        onChange={handleOwnerInputChange}
                        className={`input-style ${ownerErrors.email ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                      />
                      <ErrorMessage error={ownerErrors.email} />
                    </div>
                    <div>
                      <label htmlFor="ownerPhone" className="block text-sm font-medium text-gray-700 mb-2">
                        Phone Number (Optional)
                      </label>
                      <input
                        type="tel"
                        id="ownerPhone"
                        name="phone"
                        value={ownerProfile.phone}
                        onChange={handleOwnerInputChange}
                        className={`input-style ${ownerErrors.phone ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                      />
                      <ErrorMessage error={ownerErrors.phone} />
                    </div>
                    <div>
                      <label htmlFor="ownerPhoto" className="block text-sm font-medium text-gray-700 mb-2">
                        Owner Photo (Optional)
                      </label>
                      <input
                        type="file"
                        id="ownerPhoto"
                        name="photo"
                        ref={ownerPhotoInputRef}
                        onChange={handleOwnerPhotoChange}
                        accept="image/*"
                        className="input-style"
                      />
                      {ownerPhotoPreview && (
                        <div className="mt-2">
                          <img
                            src={ownerPhotoPreview}
                            alt="Owner photo preview"
                            className="w-16 h-16 object-cover rounded-full border"
                          />
                        </div>
                      )}
                    </div>
                    <div className="md:col-span-2">
                      <label htmlFor="ownerBio" className="block text-sm font-medium text-gray-700 mb-2">
                        Bio (Optional)
                      </label>
                      <textarea
                        id="ownerBio"
                        name="bio"
                        value={ownerProfile.bio}
                        onChange={handleOwnerInputChange}
                        rows={3}
                        className="input-style"
                        placeholder="Tell us about yourself and your business experience..."
                      />
                    </div>
                  </div>
                </div>

                {/* Businesses Section */}
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-xl font-bold text-gray-900 flex items-center gap-2">
                      <Users className="w-5 h-5" />
                      Your Businesses ({businesses.length})
                    </h3>
                    <button
                      type="button"
                      onClick={addBusiness}
                      className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                    >
                      <Plus className="w-4 h-4" />
                      Add Another Business
                    </button>
                  </div>

                  {businesses.map((business, index) => (
                    <div key={business.id} className="bg-gray-50 p-6 rounded-lg mb-4">
                      <div className="flex justify-between items-center mb-4">
                        <h4 className="text-lg font-medium text-gray-900">
                          Business #{index + 1}
                        </h4>
                        {businesses.length > 1 && (
                          <button
                            type="button"
                            onClick={() => removeBusiness(business.id)}
                            className="flex items-center gap-1 px-3 py-1 bg-red-100 text-red-700 rounded hover:bg-red-200"
                          >
                            <Minus className="w-4 h-4" />
                            Remove
                          </button>
                        )}
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {/* Business Name */}
                        <div className="md:col-span-2">
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Business Name *
                          </label>
                          <input
                            type="text"
                            value={business.name}
                            onChange={(e) => handleBusinessInputChange(business.id, 'name', e.target.value)}
                            className={`input-style ${businessErrors[`business-${business.id}-name`] ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                            required
                          />
                          <ErrorMessage error={businessErrors[`business-${business.id}-name`]} />
                        </div>

                        {/* Category */}
                        <div className="relative">
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Business Category (Optional)
                          </label>
                          <button
                            type="button"
                            onClick={() => setActiveBusinessDropdown(
                              activeBusinessDropdown === business.id ? null : business.id
                            )}
                            className={`w-full px-4 py-2 text-left border rounded-lg bg-gray-50 hover:bg-gray-100 focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-shadow duration-200 flex justify-between items-center ${
                              businessErrors[`business-${business.id}-category`] ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : 'border-gray-300'
                            }`}
                          >
                            <span className={business.category ? 'text-gray-900' : 'text-gray-500'}>
                              {business.category || 'Select a category'}
                            </span>
                            <ChevronDown className="w-4 h-4 text-gray-400" />
                          </button>

                          {activeBusinessDropdown === business.id && (
                            <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-20 overflow-y-auto max-h-60">
                              {businessCategories.map(category => (
                                <button
                                  key={category}
                                  type="button"
                                  onClick={() => handleBusinessCategorySelect(business.id, category)}
                                  className="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 border-b border-gray-100 last:border-b-0"
                                >
                                  {category}
                                </button>
                              ))}
                            </div>
                          )}
                          <ErrorMessage error={businessErrors[`business-${business.id}-category`]} />
                        </div>

                        {/* Website */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Website URL (Optional)
                          </label>
                          <input
                            type="url"
                            value={business.website}
                            onChange={(e) => handleBusinessInputChange(business.id, 'website', e.target.value)}
                            className={`input-style ${businessErrors[`business-${business.id}-website`] ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                            placeholder="https://example.com"
                          />
                          <ErrorMessage error={businessErrors[`business-${business.id}-website`]} />
                        </div>

                        {/* Phone Number */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Phone Number (Optional)
                          </label>
                          <input
                            type="tel"
                            value={business.phone}
                            onChange={(e) => handleBusinessInputChange(business.id, 'phone', e.target.value)}
                            className={`input-style ${businessErrors[`business-${business.id}-phone`] ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                            placeholder="Business phone number"
                          />
                          <ErrorMessage error={businessErrors[`business-${business.id}-phone`]} />
                        </div>

                        {/* Email Address */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Email Address (Optional)
                          </label>
                          <input
                            type="email"
                            value={business.email}
                            onChange={(e) => handleBusinessInputChange(business.id, 'email', e.target.value)}
                            className={`input-style ${businessErrors[`business-${business.id}-email`] ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                            placeholder="Business email address"
                          />
                          <ErrorMessage error={businessErrors[`business-${business.id}-email`]} />
                        </div>

                        {/* Address */}
                        <div className="md:col-span-2">
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Full Address (Optional)
                          </label>
                          <input
                            type="text"
                            value={business.address}
                            onChange={(e) => handleBusinessInputChange(business.id, 'address', e.target.value)}
                            className={`input-style ${businessErrors[`business-${business.id}-address`] ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                          />
                          <ErrorMessage error={businessErrors[`business-${business.id}-address`]} />
                        </div>

                        {/* Description */}
                        <div className="md:col-span-2">
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Business Description (Optional)
                          </label>
                          <textarea
                            value={business.description}
                            onChange={(e) => handleBusinessInputChange(business.id, 'description', e.target.value)}
                            rows={3}
                            className="input-style"
                            placeholder="Brief description of this business and services..."
                          />
                        </div>

                        {/* Logo Upload */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Business Logo (Optional)
                          </label>
                          <input
                            type="file"
                            onChange={(e) => handleBusinessLogoChange(business.id, e)}
                            accept="image/*"
                            className="input-style"
                          />
                          {business.logoPreview && (
                            <div className="mt-2">
                              <img
                                src={business.logoPreview}
                                alt="Logo preview"
                                className="w-16 h-16 object-cover rounded border"
                              />
                            </div>
                          )}
                        </div>

                        {/* Social Media Links */}
                        <div className="md:col-span-2">
                          <h5 className="text-md font-medium text-gray-900 mb-3">Social Media Links (Optional)</h5>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                Facebook URL
                              </label>
                              <input
                                type="url"
                                value={business.socialMedia.facebook}
                                onChange={(e) => handleBusinessSocialMediaChange(business.id, 'facebook', e.target.value)}
                                className="input-style"
                                placeholder="https://facebook.com/..."
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                Instagram URL
                              </label>
                              <input
                                type="url"
                                value={business.socialMedia.instagram}
                                onChange={(e) => handleBusinessSocialMediaChange(business.id, 'instagram', e.target.value)}
                                className="input-style"
                                placeholder="https://instagram.com/..."
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                LinkedIn URL
                              </label>
                              <input
                                type="url"
                                value={business.socialMedia.linkedin}
                                onChange={(e) => handleBusinessSocialMediaChange(business.id, 'linkedin', e.target.value)}
                                className="input-style"
                                placeholder="https://linkedin.com/..."
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

        {/* Submit Button */}
        <div className="flex justify-end gap-4">
          <button
            type="button"
            onClick={onClose}
            className="bg-gray-300 text-gray-700 px-6 py-2 rounded-lg hover:bg-gray-400 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className="bg-primary-600 text-white px-6 py-2 rounded-lg hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
          >
{isSubmitting 
              ? (submissionType === 'single' ? 'Adding Business...' : 'Adding Business Group...') 
              : (submissionType === 'single' ? 'Add Business to Directory' : 'Add Business Group to Directory')
            }
          </button>
        </div>
      </form>
        </div>
      </div>
    </div>
  );
}

// Add this to your index.css or a global stylesheet
// .input-style {
//   @apply block w-full px-4 py-2 text-gray-900 bg-gray-50 border border-gray-300 rounded-lg focus:ring-primary-500 focus:border-primary-500 transition-shadow duration-200;
// } 
